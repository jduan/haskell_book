Chapter Exercises

Review of types

1. d
2. b
3. d
4. b

Reviewing currying


  print (appedCatty "woohoo!" == "woops mrow woohoo!")
  print (flappe "1" == "1 mrow haha")
  print (flappe (appedCatty "2") == "woops mrow 2 mrow haha")
  print (appedCatty (flappe "blue") == "woops mrow blue mrow haha")
  print
    (cattyConny (flappe "pink") (cattyConny "green" (appedCatty "blue")) ==
     "pink mrow haha mrow green mrow woops mrow blue")
  print (cattyConny (flippy "Pugs" "are") "awesome" == "are mrow Pugs mrow awesome")


Recurision

1.
go 15 2 0
go 13 2 1
go 11 2 2
go 9 2 3
go 7 2 4
go 5 2 5
go 3 2 6
go 1 2 7
return (7, 1)

2.
sumR :: (Eq a, Num a) => a -> a
sumR n = go 1 0
  where
    go i total
      | i == n = total + n
      | otherwise = go (i + 1) (total + i)

3.
multiply :: (Integral a) => a -> a -> a
multiply m n = go m n 0
  where
    go m n total
      | m == 1 = total + n
      | otherwise = go (m - 1) n (total + n)


Fixing dividedBy

dividedBy :: (Ord t, Num a, Num t) => t -> t -> Maybe (a, t)
dividedBy num denom
  | denom == 0 = Nothing
  | num < 0 && denom > 0 =
    let (a, b) = go (abs (num - 2)) denom 0
     in Just (negate a, b)
  | num > 0 && denom < 0 =
    let (a, b) = go (num + 2) (negate denom) 0
     in Just (negate a, negate b)
  | num < 0 && denom < 0 =
    let (a, b) = go (negate num) (negate denom) 0
     in Just (a, negate b)
  | otherwise = Just (go num denom 0)
  where
    go n d count
      | n < d = (count, n)
      | otherwise = go (n - d) d (count + 1)


McCarthy 91 function


mc91 :: Integral a => a -> a
mc91 n
  | n > 100 = n - 10
  | otherwise = mc91 $ mc91 $ n + 11


Numbers into words

see WordNumber.hs
