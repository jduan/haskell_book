Exercises: Bottom Madness

Will it blow up?

1. blow up
[x ^ y | x <- [1..5], y <- [2, undefined]]

2. [1]
take 1 $ [x ^ y | x <- [1..5], y <- [2, undefined]]

3. blow up
sum [1, undefined, 3]

4. 3
length [1, 2, undefined]

5. blow up
length $ [1, 2, 3] ++ undefined

6. [2]
take 1 $ filter even [1, 2, 3, undefined]

7. blow up
take 1 $ filter even [1, 3, undefined]

8. 1
take 1 $ filter odd [1, 3, undefined]

9. [1, 3]
take 2 $ filter odd [1, 3, undefined]

10. blow up
take 3 $ filter odd [1, 3, undefined]


Intermission: Is it in normal form?

1.
2.
3.
4.
5.
6.
7.


Exercises: More Bottoms

1. blow up
take 1 $ map (+1) [undefined, 2, 3]

2. [2]
take 1 $ map (+1) [1, undefined, 3]

3. blow up
take 2 $ map (+1) [1, undefined, 3]

4. Given a String, map it a list of Booleans.
itIsMystery xs = map (\x -> elem x "aeiou") xs

5.
a)
map (^2) [1..10]
[1,4,9,16,25,36,49,64,81,100]

b)
map minimum [[1..10], [10..20], [20..30]]
[1,10,20]

c)
map sum [[1..5], [1..5], [1..5]]
[15,15,15]

6.
map (\x -> if x == 3 then (-x) else x) [1..10]
map (\x -> bool x (-x) (x == 3)) [1..10]


Exercises: Filtering


1.
filter (\x -> (rem x 3) == 0) [1..30]

2.
length $ filter (\x -> (rem x 3) == 0) [1..30]

3.
myFilter :: String -> [String]
myFilter sentence = dropArticles $ words sentence
  where
    dropArticles = filter (\x -> x `notElem` ["the", "a", "an"])
