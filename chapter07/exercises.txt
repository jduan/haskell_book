Exercises: Grab Bag

1. a, b, c, and d
2. d
3.
addOneIfOdd n =
  case odd n of
    True -> f n
    False -> n
  where
    f = \n -> n + 1

addFive x y =
  (if x > y
     then y
     else x) +
  5

addFive2 =
  \x ->
    \y ->
      (if x > y
         then y
         else x) +
      5

mflip f = \x -> \y -> f y x

mflip2 f x y = f y x



Exercises: Variety Pack

1.
k :: (a, b) -> a
k1 :: Enum a => a
k2 :: [Char]
k3 :: Enum a => a

c) k1 and k2 are 3

2.
f :: (a, b, c) -> (d, e, f) -> ((a, d), (c, f))
f (a, b, c) (d, e, f) = ((a, d), (c, f))


Exercises: case practice

1.
functionC x y =
  case x > y of
    True -> x
    False -> y

2.
ifEvenAdd2 n =
  case even n of
    True -> n + 2
    False -> n

3.
nums x =
  case compare x 0 of
    LT -> -1
    GT -> 1
    EQ -> 0


Exercises: artful dodgy

*Exercises> dodgy 1 0
1
*Exercises> dodgy 1 1
11
*Exercises> dodgy 2 2
22
*Exercises> dodgy 1 2
21
*Exercises> oneIsOne 1
11
*Exercises> oneIsOne 2
21
*Exercises> oneIsTwo 1
21
*Exercises> oneIsTwo 2
22
*Exercises> oneIsOne 3
31
*Exercises> oneIsTwo 3
23


Exercises: Guard Duty

1. they all evaluate to 'F'

2. it returns 'C' now

3. b

4.
pal :: Eq a => [a] -> Bool

5.
pal :: Eq a => [a] -> Bool

6. c

7.
numbers :: (Ord a, Num a, Num p) => a -> p
numbers x
  | x < 0 = -1
  | x == 0 = 0
  | x > 0 = 1

8. same as above


Chapter Exercises

Multiple Choice

1. d
2. b
3. d
4. b
5. a


Let's write code
See "exercises.hs"

6.
*Exercises> :t roundTrip 4
roundTrip 4 :: Read b => b

*Exercises> print (roundTrip 4)
*** Exception: Prelude.read: no parse

*Exercises> print (roundTrip 4 :: Int)
