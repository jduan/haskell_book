Exercises: Dog Types

1. Doggies is a type constructor

2. :kind Doggies
Doggies :: * -> *

3. :kind Doggies String
Doggies String :: *

4. :t Husky 10
Husky 10 :: Num a => Doggies a

5. Doggies Integer

6. Doggies String

7. depends on where/how it's used

8. DogueDeBordeaux :: doge -> DogueDeBordeaux doge

9. DogueDeBordeaux String


Exercises: Vehicles

1. type of myCar is Vehicle

2.
isCar :: Vehicle -> Bool
isCar (Car _ _) = True
isCar _ = False

isPlane :: Vehicle -> Bool
isPlane (Plane _) = True
isPlane _ = False

areCars :: [Vehicle] -> [Bool]
areCars = map isCar

3.
getManu :: Vehicle -> Manufacturer
getManu (Car m _) = m
getManu _ = error "not a car"

4.
error out

5. need to change
* isPlane
* doge


Exercises: Cardinality

1. Cardinality: 1

2. Cardinality: 3

3. Cardinality: 65536

4.
Int: Cardinality: (2 ^ 64) = 18446744073709551616
Integer: infinite

5. 2 ^ 8 = 256


Exercises: For Example

1.
type of MakeExample is Example
it says "Data Constructor not in scope: Example"

2.
typeclass: Show

3.
MakeExample :: Int -> Example


-- Exercises: Logic Goats
--
-- 1.
type IntString = (Int, String)

instance TooMany (Int, String) where
  tooMany (n, s) = n > 42

instance TooMany (Int, Int) where
  tooMany (x, y) = x + y > 42

-- I don't fully understand how to use this
instance (Num a, TooMany a) => TooMany (a, a) where
  tooMany (x, y) = tooMany x || tooMany y


Exercises: Pity the Bool

1.
Big Bool = 2
Small Bool = 2
total: 4

2.
Numba Int8 = 256
BoolyBool Bool = 2
total: 258
