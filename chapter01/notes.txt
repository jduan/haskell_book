Questions:
??? page 12: (lambda xy.xxy) (lambda x.xy) (lambda x.xz)

Intermission: Equivalence Exercises
1: b
2: c
3: b

Combinators
A combinator is a lambda term with no free variables. They server only to
combine the arguments they're given.

Divergence
means that the reduction process never terminates or ends.

Summary
* Functional programming is based on expressions that include variables or
constant values, expressions combined with other expressions, or functions.
* Functions have a head and a body and are those expressions that can be
applied to arguments and reduced, or evaluated, to a result.
* Variables may be bound in the function declaration, and every time a bound
variable shows up in a function, it has the same value.
* All functions take one argument and return one result.
* Functions are a mapping of a set of inputs to a set of outputs. Given the
same input, they always return the same result.

Definitions
A lambda abstraction is an anonymous function or lambda term.
Application is how one evaluates or reduces lambdas, this binds the argument
to whatever the lambda was applied to.
Lambda calculus is a formal system for expressing programs in terms of
abstraction and application.
Normal order means evaluating the leftmost outermost lambdas first, evaluating
terms nested within after you've run out of arguments to apply.

Exercises

Combinators: 1, 3, 4

Normal or diverge?
1: normal
2: diverge
3: normal

Beta reduce
1: z
2: bb
3: qq
4: yy
5: yy
6: aac
??? 7: za or (lambda z1.za)
